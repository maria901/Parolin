
/*  ainda falta alguns testes , vamos la   */

#pragma warning( disable : 4101 )
#pragma warning( disable : 4102 )
#pragma warning( disable : 4018 )


#include <windows.h>
#include <winioctl.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

// #define NDEBUG

#undef NDEBUG
#include <assert.h>


extern void __cdecl dprintf (char *format, ...);





HANDLE lfopen (const char *szFileName, char *pMode);
void   lfclose (HANDLE hFile);
__int64 lfseek (HANDLE hFile, __int64 iDistance, int iMode);
__int64 lftell (HANDLE hFile);
__int64 lffilesize (const char *szFileName);
unsigned long lfread (void *pBuffer, unsigned long ulCount, HANDLE hFile);
unsigned long lfwrite (void *pBuffer, unsigned long ulCount, HANDLE hFile);





HANDLE lfopen (const char *szFileName, char *pMode)
{


     HANDLE ret = 0;


     if (0 == strcmp (pMode, "rb+"))
       {
	    dprintf ("Usando rb+\n");
	    ret = CreateFile (szFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_ARCHIVE, NULL);
       }
     else
       {

	    switch (pMode[0])
	      {
	      case 'r':


		   // dprintf ("opening read file %s \n", szFileName);
		   ret = CreateFile (szFileName, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_ARCHIVE, NULL);
		   break;
	      case 'w':
		   // dprintf ("opening write file %s \n", szFileName);
		   ret = CreateFile (szFileName, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_ARCHIVE, NULL);
		   break;
	      case 'a':
		   ret = CreateFile (szFileName, GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_ARCHIVE, NULL);
		   break;

	      default:
		   break;

	      }
       }



     if (INVALID_HANDLE_VALUE == ret)
       {

	    ret = 0;
       }
     return ret;
}




void lfclose (HANDLE hFile)
{
     assert (CloseHandle (hFile));
}




__int64 lfseek (HANDLE hFile, __int64 iDistance, int iMode)
{

/*

FILE_BEGIN  The starting point is zero or the beginning of the file. If FILE_BEGIN is specified, DistanceToMove is interpreted as an unsigned location for the new file pointer.
FILE_CURRENT    The current value of the file pointer is the starting point.
FILE_END    The current end-of-file position is the starting point.
*/

     LARGE_INTEGER li;

     int    isft = -1;


     li.QuadPart = iDistance;


     //modes FILE_END    FILE_CURRENT    FILE_BEGIN
     li.LowPart = SetFilePointer (hFile, li.LowPart, &li.HighPart, iMode);

     if (li.LowPart == isft && GetLastError () != ERROR_SUCCESS)
	  return -1;

     return (__int64) li.QuadPart;
}


__int64 lftell (HANDLE hFile)
{
     LARGE_INTEGER li;
     int    isft = -1;
     li.QuadPart = 0;
     li.LowPart = SetFilePointer (hFile, 0, &li.HighPart, FILE_CURRENT);

     if (li.LowPart == isft && GetLastError () != ERROR_SUCCESS)
	  return -1;

     return (__int64) li.QuadPart;
}


static __int64 fs_filesize (HANDLE hFile)
{
     LARGE_INTEGER li;

     li.QuadPart = 0;
     li.LowPart = GetFileSize (hFile, (LPDWORD) & li.HighPart);

     if (li.LowPart == 0xFFFFFFFF)
       {
	    if (GetLastError () != ERROR_SUCCESS)
		 return 0;
       }

     return (__int64) li.QuadPart;
}


__int64 lffilesize (const char *szFileName)
{
     __int64 iResult;
     HANDLE hFile = CreateFile (szFileName, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_ARCHIVE, NULL);
     if (hFile == INVALID_HANDLE_VALUE)
	  return 0;

     iResult = fs_filesize (hFile);

     CloseHandle (hFile);

     return iResult;
}

__int64 lffilesizeW (const WCHAR * szFileName)
{
     __int64 iResult;
     HANDLE hFile = CreateFileW (szFileName, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_ARCHIVE, NULL);
     if (hFile == INVALID_HANDLE_VALUE)
	  return 0;

     iResult = fs_filesize (hFile);

     CloseHandle (hFile);

     return iResult;
}

unsigned long lfread (void *pBuffer, unsigned long ulCount, HANDLE hFile)
{
     unsigned long ulRead;

     if (ReadFile (hFile, pBuffer, ulCount, &ulRead, NULL) == FALSE)
	  return 0;
     else
	  return ulRead;
}


unsigned long lfwrite (void *pBuffer, unsigned long ulCount, HANDLE hFile)
{
     unsigned long ulWritten;

     if (WriteFile (hFile, pBuffer, ulCount, &ulWritten, NULL) == FALSE)
	  return 0;
     else
	  return ulWritten;
}


int setendofile (HANDLE file, __int64 position)
{

     int    ret;

     __int64 ret2;

     ret2 = lfseek (file, position, FILE_BEGIN);

     if (-1 == ret2)
       {

	    return 0;
       }

     ret = SetEndOfFile (file);

     if (0 == ret)
       {
	    return 0;
       }



     return 1;
}
