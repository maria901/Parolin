//2021 amanda & MathMan  April 24

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *    
 *                                                                          *
 *                Copyright (C) <202*>  <BinaryWork Corp.>                  *
 *                                                                          *
 *   This program is free software: you can redistribute it and/or modify   *
 *   it under the terms of the GNU General Public License as published by   *
 *   the  Free  Software  Foundation, either version 3 of the License, or   *
 *   (at your option) any later version.                                    *
 *                                                                          *
 *   This  program  is  distributed  in the hope that it will be useful,    *
 *   but  WITHOUT  ANY WARRANTY;  without  even  the  implied warranty of   *
 *   MERCHANTABILITY  or  FITNESS  FOR  A  PARTICULAR  PURPOSE.   See the   *
 *   GNU General Public License for more details.                           *
 *                                                                          *
 *   You should have received a copy of the GNU GENERAL PUBLIC LICENSE      *
 *       and GNU LESSER GENERAL PUBLIC LICENSE along with this program.     *
 *       If not, see <http://www.gnu.org/licenses/>.                        *
 *                                                                          *
 *   support: https://arsoftware.net.br/binarywork _____________            *
 *                                                                          *
 *       direct programmers e-mails:                                        *
 *       MathMan: arsoftware25@gmail.com  ricardo@arsoftware.net.br         *
 *        Amanda: arsoftware10@gmail.com  amanda@arsoftware.net.br          *
 *                                                                          *
 *       immediate contact(for a very fast answer) WhatsApp                 *
 *       (+55)41 9627 1708 - it is always on                                *
 *                                                                          *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/*-
 * This file is in the public domain.
 * Do with it as you will., ok, as you wish
 */

/*-
 * This is a compact "tar" program whose primary goal is small size.
 * Statically linked, it can be very small indeed.  This serves a number
 * of goals:
 *   o a testbed for libarchive (to check for link pollution),
 *   o a useful tool for space-constrained systems (boot floppies, etc),
 *   o a place to experiment with new implementation ideas for bsdtar,
 *   o a small program to demonstrate libarchive usage.
 *
 * Use the following macros to suppress features:
 *   NO_BZIP2 - Implies NO_BZIP2_CREATE and NO_BZIP2_EXTRACT
 *   NO_BZIP2_CREATE - Suppress bzip2 compression support.
 *   NO_BZIP2_EXTRACT - Suppress bzip2 auto-detection and decompression.
 *   NO_COMPRESS - Implies NO_COMPRESS_CREATE and NO_COMPRESS_EXTRACT
 *   NO_COMPRESS_CREATE - Suppress compress(1) compression support
 *   NO_COMPRESS_EXTRACT - Suppress compress(1) auto-detect and decompression.
 *   NO_CREATE - Suppress all archive creation support.
 *   NO_CPIO_EXTRACT - Suppress auto-detect and dearchiving of cpio archives.
 *   NO_GZIP - Implies NO_GZIP_CREATE and NO_GZIP_EXTRACT
 *   NO_GZIP_CREATE - Suppress gzip compression support.
 *   NO_GZIP_EXTRACT - Suppress gzip auto-detection and decompression.
 *   NO_LOOKUP - Try to avoid getpw/getgr routines, which can be very large
 *   NO_TAR_EXTRACT - Suppress tar extraction
 *
 * With all of the above macros defined (except NO_TAR_EXTRACT), you
 * get a very small program that can recognize and extract essentially
 * any uncompressed tar archive.  On FreeBSD 5.1, this minimal program
 * is under 64k, statically linked, which compares rather favorably to
 *         main(){printf("hello, world");}
 * which is over 60k statically linked on the same operating system.
 * Without any of the above macros, you get a static executable of
 * about 180k with a lot of very sophisticated modern features.
 * Obviously, it's trivial to add support for ISO, Zip, mtree,
 * lzma/xz, etc.  Just fill in the appropriate setup calls.
 */

#include  <windows.h>
#include   <stdint.h>
#include    <stdio.h>
#include   <stdlib.h>
#include   <string.h>
#include     <time.h>
#include    <errno.h>
#include    <fcntl.h>
#include    <ctype.h>
#include     <math.h>
#include   <wctype.h>
#include    <wchar.h>
#include   <stdarg.h>
#include   <stddef.h>
#include   <setjmp.h>
#include   <locale.h>
#include   <signal.h>
#include   <limits.h>
#include    <float.h>
#include   <iso646.h>

#undef NDEBUG
#include   <assert.h>

#include  <stdbool.h>

#include  <process.h>

#ifndef uchar
#define uchar unsigned char
#endif

#ifndef uint
#define uint unsigned int
#endif

#ifndef ushort
#define ushort unsigned short
#endif

#include <sys/types.h>
#include <sys/stat.h>

static int64_t *bytes_read_p = 0;

extern int number_of_threads_p;

#include <archive.h>
#include <archive_entry.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <zlib.h>
#include <bzlib.h>
#include <lzma.h>

static void
mprintf___arp(char *format, ...)
{
	char *     buffer = calloc(1, 10000);        //for multithread sake
	va_list amanda_do_ricardo;

	va_start(amanda_do_ricardo, format);
	vsprintf(buffer, format, amanda_do_ricardo);
	va_end(amanda_do_ricardo);
	MessageBox(0, buffer, "BW Error", MB_OK |
	           MB_ICONERROR | MB_SYSTEMMODAL);
	free(buffer);
}

/*
 * NO_CREATE implies NO_BZIP2_CREATE and NO_GZIP_CREATE and NO_COMPRESS_CREATE.
 */
#ifdef NO_CREATE
#undef NO_BZIP2_CREATE
#define NO_BZIP2_CREATE
#undef NO_COMPRESS_CREATE
#define	NO_COMPRESS_CREATE
#undef NO_GZIP_CREATE
#define NO_GZIP_CREATE
#endif

/*
 * The combination of NO_BZIP2_CREATE and NO_BZIP2_EXTRACT is
 * equivalent to NO_BZIP2.
 */
#ifdef NO_BZIP2_CREATE
#ifdef NO_BZIP2_EXTRACT
#undef NO_BZIP2
#define NO_BZIP2
#endif
#endif

#ifdef NO_BZIP2
#undef NO_BZIP2_EXTRACT
#define NO_BZIP2_EXTRACT
#undef NO_BZIP2_CREATE
#define NO_BZIP2_CREATE
#endif

/*
 * The combination of NO_COMPRESS_CREATE and NO_COMPRESS_EXTRACT is
 * equivalent to NO_COMPRESS.
 */
#ifdef NO_COMPRESS_CREATE
#ifdef NO_COMPRESS_EXTRACT
#undef NO_COMPRESS
#define NO_COMPRESS
#endif
#endif

#ifdef NO_COMPRESS
#undef NO_COMPRESS_EXTRACT
#define NO_COMPRESS_EXTRACT
#undef NO_COMPRESS_CREATE
#define NO_COMPRESS_CREATE
#endif

/*
 * The combination of NO_GZIP_CREATE and NO_GZIP_EXTRACT is
 * equivalent to NO_GZIP.
 */
#ifdef NO_GZIP_CREATE
#ifdef NO_GZIP_EXTRACT
#undef NO_GZIP
#define NO_GZIP
#endif
#endif

#ifdef NO_GZIP
#undef NO_GZIP_EXTRACT
#define NO_GZIP_EXTRACT
#undef NO_GZIP_CREATE
#define NO_GZIP_CREATE
#endif

#ifndef NO_CREATE
static void	create(const char *filename, int compress, const char **argv);
#endif
static void	errmsg(const char *);
static void	extract(const char *filename, int do_extract, int flags);
static int	copy_data(struct archive *, struct archive *);
static void	msg(const char *);
static void	usage(void);

static int verbose = 0;

extern int wide_fix_p;

static bool fatal_error_p = false;

int
main(int argc, const char **argv)
{
	const char *filename = NULL;
	int compress, flags, mode, opt;

	(void)argc;
	mode = 'x';
	verbose = 0;
	compress = '\0';
	flags = ARCHIVE_EXTRACT_TIME;
	fprintf(stderr, "dentro\n");
	fflush(stderr);
	/* Among other sins, getopt(3) pulls in printf(3). */
	while (*++argv != NULL && **argv == '-') {
		const char *p = *argv + 1;

		while ((opt = *p++) != '\0') {
			switch (opt) {
#ifndef NO_CREATE
			case 'c':
				mode = opt;
				break;
#endif
			case 'f':
				if (*p != '\0')
					filename = p;
				else
					filename = *++argv;
				p += strlen(p);
				break;
#ifndef NO_BZIP2_CREATE
			case 'j':
				compress = opt;
				break;
#endif
			case 'p':
				flags |= ARCHIVE_EXTRACT_PERM;
				flags |= ARCHIVE_EXTRACT_ACL;
				flags |= ARCHIVE_EXTRACT_FFLAGS;
				break;
			case 't':
				mode = opt;
				break;
			case 'v':
				verbose++;
				break;
			case 'x':
				mode = opt;
				break;
#ifndef NO_BZIP2_CREATE
			case 'y':
				compress = opt;
				break;
#endif
#ifndef NO_COMPRESS_CREATE
			case 'Z':
				compress = opt;
				break;
#endif
#ifndef NO_GZIP_CREATE
			case 'z':
				compress = opt;
				break;
#endif
			default:

			     fprintf(stderr, "Usage\n");
			     fflush(stderr);
	
				usage();
			}
		}
	}

	fprintf(stderr, "dentro 2 %p\n", filename);
	fflush(stderr);
	
	switch (mode) {
#ifndef NO_CREATE
	case 'c':
	     fprintf(stderr, "dentro 4 %p\n", filename);
	fflush(stderr);
		create(filename, compress, argv);
		break;
#endif
	case 't':
	     fprintf(stderr, "dentro 5 %p\n", filename);
	fflush(stderr);
		extract(filename, 0, flags);
		break;
	case 'x':
	     fprintf(stderr, "dentro 6 %p\n", filename);
	fflush(stderr);
		extract(filename, 1, flags);
		break;
	}
fprintf(stderr, "dentro 3 %p\n", filename);
	fflush(stderr);
	return (0);
}


#ifndef NO_CREATE
static char buff[(1 << 17)];

static void
create(const char *filename, int compress, const char **argv)
{
	struct archive *a;
	struct archive_entry *entry;
	ssize_t len;
	int fd;

	a = archive_write_new();
	switch (compress) {
#ifndef NO_BZIP2_CREATE
	case 'j': case 'y':
	     //archive_write_add_filter_bzip2(a);
		break;
#endif
#ifndef NO_COMPRESS_CREATE
	case 'Z':
	     //archive_write_add_filter_compress(a);
		break;
#endif
#ifndef NO_GZIP_CREATE
	case 'z':
	     //archive_write_add_filter_gzip(a);
		break;
#endif
	default:
		archive_write_add_filter_none(a);
		break;
	}
//	archive_write_set_format_ustar(a);
	archive_write_set_format_7zip(a);
	//archive_write_add_filter_none(a);
	//archive_write_set_format_zip(a);
	archive_write_add_filter_none(a);

	/*
	if (ARCHIVE_OK != archive_write_set_options(a,
						    "zip:encryption=zipcrypt"))
	{
	     printf("This system does not have cryptographic library");
	
	}
	*/
	/*	
	if (ARCHIVE_OK != archive_write_set_options(a,
						    "zip:encryption=aes128"))
	{
	     printf("This system does not have cryptographic library");
	
	}
	*/
	/*
	if (ARCHIVE_OK != archive_write_set_options(a,
						    "zip:encryption=aes256"))
	{
	     printf("This system does not have cryptographic library");
	
	}
	*/
	
	archive_write_set_passphrase(a, "password1234");
	
	if (filename != NULL && strcmp(filename, "-") == 0)
		filename = NULL;
	archive_write_open_filename(a, filename);

	while (*argv != NULL) {
		struct archive *disk = archive_read_disk_new();
#ifndef NO_LOOKUP
		
		archive_read_disk_set_standard_lookup(disk);
#endif
		int r;

		r = archive_read_disk_open(disk, *argv);
		if (r != ARCHIVE_OK) {
			errmsg(archive_error_string(disk));
			errmsg("\n");
			exit(1);
		}

		for (;;) {
			int needcr = 0;

			entry = archive_entry_new();
			r = archive_read_next_header2(disk, entry);
			if (r == ARCHIVE_EOF)
				break;
			if (r != ARCHIVE_OK) {
				errmsg(archive_error_string(disk));
				errmsg("\n");
				exit(1);
			}
			archive_read_disk_descend(disk);
			if (verbose) {
				msg("a ");
				msg(archive_entry_pathname(entry));
				needcr = 1;
			}
			r = archive_write_header(a, entry);
			if (r < ARCHIVE_OK) {
				errmsg(": ");
				errmsg(archive_error_string(a));
				needcr = 1;
			}
			if (r == ARCHIVE_FATAL)
				exit(1);
			if (r > ARCHIVE_FAILED) {
#if 0
				/* Ideally, we would be able to use
				 * the same code to copy a body from
				 * an archive_read_disk to an
				 * archive_write that we use for
				 * copying data from an archive_read
				 * to an archive_write_disk.
				 * Unfortunately, this doesn't quite
				 * work yet. */
				copy_data(disk, a);
#else
				/* For now, we use a simpler loop to copy data
				 * into the target archive. */
				fd = open(archive_entry_sourcepath(entry), O_RDONLY | O_BINARY);//sacanagem...
				len = read(fd, buff, sizeof(buff));
				while (len > 0) {
					archive_write_data(a, buff, len);
					len = read(fd, buff, sizeof(buff));
				}
				close(fd);
#endif
			}
			archive_entry_free(entry);
			if (needcr)
				msg("\n");
		}
		archive_read_close(disk);
		archive_read_free(disk);
		argv++;
	}
	archive_write_close(a);
	archive_write_free(a);
	printf("Deu certo\n");
}
#endif

static void
extract(const char *filename, int do_extract, int flags)
{
	struct archive *a;
	struct archive *ext;
	struct archive_entry *entry;
	int r;

	a = archive_read_new();
	ext = archive_write_disk_new();
	archive_write_disk_set_options(ext, flags);
#ifndef NO_BZIP2_EXTRACT
	archive_read_support_filter_bzip2(a);
#endif
#ifndef NO_GZIP_EXTRACT
	archive_read_support_filter_gzip(a);
#endif
#ifndef NO_COMPRESS_EXTRACT
	archive_read_support_filter_compress(a);
#endif
#ifndef NO_TAR_EXTRACT
	//;archive_read_support_format_tar(a);
	archive_read_support_format_all(a);
	archive_read_add_passphrase(a, "password1234");
#endif
#ifndef NO_CPIO_EXTRACT
	archive_read_support_format_cpio(a);
#endif
#ifndef NO_LOOKUP
	archive_write_disk_set_standard_lookup(ext);
#endif
	if (filename != NULL && strcmp(filename, "-") == 0)
		filename = NULL;
	if ((r = archive_read_open_filename(a, filename, 10240))) {
		errmsg(archive_error_string(a));
		errmsg("\n");
		exit(r);
	}
	for (;;) {
		int needcr = 0;
		r = archive_read_next_header(a, &entry);
		if (r == ARCHIVE_EOF)
			break;
		if (r != ARCHIVE_OK) {
			errmsg(archive_error_string(a));
			errmsg("\n");
			exit(1);
		}
		if (verbose && do_extract)
			msg("x ");
		if (verbose || !do_extract) {
			msg(archive_entry_pathname(entry));
			msg(" ");
			needcr = 1;
		}
		if (do_extract) {
			r = archive_write_header(ext, entry);
			if (r != ARCHIVE_OK) {
				errmsg(archive_error_string(a));
				needcr = 1;
			}
			else {
				r = copy_data(a, ext);
				if (r != ARCHIVE_OK)
					needcr = 1;
			}
		}
		if (needcr)
			msg("\n");
	}
	archive_read_close(a);
	archive_read_free(a);

	archive_write_close(ext);
  	archive_write_free(ext);
	exit(0);
}

static int
copy_data(struct archive *ar, struct archive *aw)
{
	int r;
	const void *buff;
	size_t size;
	int64_t offset;

	for (;;) {
		r = archive_read_data_block(ar, &buff, &size, &offset);
		if (r == ARCHIVE_EOF)
			return (ARCHIVE_OK);
		if (r != ARCHIVE_OK) {
			errmsg(archive_error_string(ar));
			return (r);
		}
		r = archive_write_data_block(aw, buff, size, offset);
		if (r != ARCHIVE_OK) {
			errmsg(archive_error_string(ar));
			return (r);
		}
	}
}

static void
msg(const char *m)
{
	write(1, m, strlen(m));
}

static void
errmsg(const char *m)
{
	if (m == NULL) {
		m = "Error: No error description provided.\n";
	}
	write(2, m, strlen(m));
}

static void
usage(void)
{
/* Many program options depend on compile options. */
	const char *m = "Usage: minitar [-"
#ifndef NO_CREATE
	    "c"
#endif
#ifndef	NO_BZIP2
	    "j"
#endif
	    "tvx"
#ifndef NO_BZIP2
	    "y"
#endif
#ifndef NO_COMPRESS
	    "Z"
#endif
#ifndef NO_GZIP
	    "z"
#endif
	    "] [-f file] [file]\n";

	errmsg(m);
	exit(1);
}

WCHAR * amanda_utf8towide_1_(char *pUTF8)
{
	static WCHAR ricardo_k[1024];

	MultiByteToWideChar(CP_UTF8, 0, (LPCSTR)pUTF8, -1, ricardo_k, 1024);
	return ricardo_k;
}

enum libarchive_compression_modes_AR
{
     P_MODE_IS_ZIP__NO_PASSWORD,
     P_MODE_IS_ZIP__ZIPCRYPTO  ,
     P_MODE_IS_ZIP__AES_128    ,
     P_MODE_IS_ZIP__AES_256    ,
     P_MODE_IS_7ZIP            ,
     P_MODE_IS_ISO9660         ,
     P_MODE_IS_TAR             ,
     P_MODE_IS_GNUTAR          ,
     P_MODE_IS_V7TAR           ,
     P_MODE_IS_TAR_GZIP        ,
     P_MODE_IS_TAR_BZIP2       ,
     P_MODE_IS_TAR_XZ          ,
     P_MODE_IS_GNUTAR_GZIP     ,
     P_MODE_IS_GNUTAR_BZIP2    ,
     P_MODE_IS_GNUTAR_XZ       ,
     P_MODE_IS_V7TAR_GZIP      ,
     P_MODE_IS_V7TAR_BZIP2     ,
     P_MODE_IS_V7TAR_XZ
};

struct archive *a;
struct archive_entry *entry;
ssize_t len;
int fd;

bool is_open_p = false;

void
pedro_dprintf
(
	int amanda_level,
	char *format, ...);

void pedro_dprintfW( //para imprimir wide string use %ls ok?
	int amanda_level,
	const wchar_t *format, ...);
     
int __stdcall libarchive_create_archive_init_p(int archive_kind_p, char *file_utf_8_p, char * passphrase_p, char * compression_level_p, int number_of_threads_p_)
{

     char our_compression_data_p[300];
     int ret_arp_;
     assert(!is_open_p);

     a = archive_write_new();

     number_of_threads_p = number_of_threads_p_;
     
     /*
	case 'Z':
	//archive_write_add_filter_compress(a);*/

     
     switch(archive_kind_p)
     {

     case P_MODE_IS_ZIP__NO_PASSWORD:

	  archive_write_set_format_zip(a);
	  archive_write_add_filter_none(a);

	  strcpy(our_compression_data_p, "zip:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  pedro_dprintf(-1, "ret_arp_ %d\n", ret_arp_);
	  
	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }	  
	  
	  break;
	  
     case P_MODE_IS_ZIP__ZIPCRYPTO:

	  archive_write_set_format_zip(a);
	  archive_write_add_filter_none(a);

	  strcpy(our_compression_data_p, "zip:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  if (ARCHIVE_OK != archive_write_set_options(a,
						      "zip:encryption=zipcrypt"))
	  {
	       pedro_dprintf(2, "This system does not have cryptographic library zipcrypt");
	       assert(0 && "This system does not have cryptographic library zipcrypt");
	  }
	  
	  if(strlen(passphrase_p))
	  {
	       archive_write_set_passphrase(a, passphrase_p);	       
	  }
	  else
	  {
	       archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	       archive_write_close(a);
	       archive_write_free(a);
	       return 2;
	  }
	  
	 archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	  break;

     case P_MODE_IS_ZIP__AES_128:

	  archive_write_set_format_zip(a);
	  archive_write_add_filter_none(a);
	  
	  strcpy(our_compression_data_p, "zip:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
/*
  if (ARCHIVE_OK != archive_write_set_options(a,
						      "zip:encryption=zipcrypt"))
	  {
	       pedro_dprintf(2, "This system does not have cryptographic library zipcrypt");
	       assert(0 && "This system does not have cryptographic library zipcrypt");
	       }*/
	  
	  if (ARCHIVE_OK != archive_write_set_options(a,
						      "zip:encryption=aes128"))
	  {	       
	       pedro_dprintf(2, "This system does not have cryptographic library aes128");
	       assert(0 && "This system does not have cryptographic library aes128");
	  }
	  
	  if(strlen(passphrase_p))
	  {
	       archive_write_set_passphrase(a, passphrase_p);	       
	  }
	  else
	  {
	       archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	       archive_write_close(a);
	       archive_write_free(a);
	       return 2;
	  }

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	 archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  break;

     case P_MODE_IS_ZIP__AES_256 :
	  
	  archive_write_set_format_zip(a);
	  archive_write_add_filter_none(a);
/*
  if (ARCHIVE_OK != archive_write_set_options(a,
						      "zip:encryption=zipcrypt"))
	  {
	       pedro_dprintf(2, "This system does not have cryptographic library zipcrypt");
	       assert(0 && "This system does not have cryptographic library zipcrypt");
	       }*/
	  
	  strcpy(our_compression_data_p, "zip:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  if (ARCHIVE_OK != archive_write_set_options(a,
						      "zip:encryption=aes256"))
	  {
	
	       pedro_dprintf(2, "This system does not have cryptographic library aes256");
	       assert(0 && "This system does not have cryptographic library aes256");
	 
	  }
	  /*
	  if (ARCHIVE_OK != archive_write_set_options(a,
						      "zip:encryption=aes128"))
	  {	       
	       pedro_dprintf(2, "This system does not have cryptographic library aes128");
	       assert(0 && "This system does not have cryptographic library aes128");
	       }*/
	  
	  if(strlen(passphrase_p))
	  {
	       archive_write_set_passphrase(a, passphrase_p);	       
	  }
	  else
	  {
	       archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	       archive_write_close(a);
	       archive_write_free(a);
	       return 2;
	  }
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	  break;

     case P_MODE_IS_7ZIP :

	  archive_write_set_format_7zip(a);
	  archive_write_add_filter_none(a);

	  strcpy(our_compression_data_p, "7zip:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	  break;

     case P_MODE_IS_ISO9660:

	  assert(ARCHIVE_OK == archive_write_set_format_filter_by_ext(a, ".iso"));	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  break;

     case P_MODE_IS_TAR:

	  assert(ARCHIVE_OK == archive_write_set_format_filter_by_ext(a, ".tar"));	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  break;

     case P_MODE_IS_GNUTAR:

	  assert(ARCHIVE_OK == archive_write_set_format_gnutar(a));
	  archive_write_add_filter_none(a);
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  break;
	  
     case P_MODE_IS_V7TAR:

	  assert(ARCHIVE_OK == archive_write_set_format_v7tar(a));
	  archive_write_add_filter_none(a);
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  
	  break;
	  
     case P_MODE_IS_TAR_GZIP:

	  assert(ARCHIVE_OK == archive_write_set_format_pax_restricted(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_gzip(a));

	  strcpy(our_compression_data_p, "gzip:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	  break;
     
     case P_MODE_IS_TAR_BZIP2:

	  assert(ARCHIVE_OK == archive_write_set_format_pax_restricted(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_bzip2(a));

	  strcpy(our_compression_data_p, "bzip2:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	  break;
     case P_MODE_IS_TAR_XZ:

	  assert(ARCHIVE_OK == archive_write_set_format_pax_restricted(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_xz(a));

	  strcpy(our_compression_data_p, "xz:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
/*
	  pedro_dprintf(0, "oque foi?\n");

	  exit(27);*/
	  break;
////////////////////////////////////////////////////////////////////////////////////////
	  case P_MODE_IS_GNUTAR_GZIP:

	       assert(ARCHIVE_OK ==archive_write_set_format_gnutar (a));
	       assert(ARCHIVE_OK == archive_write_add_filter_gzip(a));

	       strcpy(our_compression_data_p, "gzip:compression-level=");

	       strcat(our_compression_data_p, compression_level_p);
	  
	       ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	       archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	       if(ARCHIVE_OK != ret_arp_)
	       {
		    archive_write_close(a);
		    archive_write_free(a);
		    return 3;
	       }

	       break;
/////////////////////////////////////////////////////////////////////////////////////////
     case P_MODE_IS_GNUTAR_BZIP2:

	  assert(ARCHIVE_OK == archive_write_set_format_gnutar(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_bzip2(a));

	  strcpy(our_compression_data_p, "bzip2:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }

	  break;
/////////////////////////////////////////////////////////////////////////////////////////

     case P_MODE_IS_GNUTAR_XZ:

	  assert(ARCHIVE_OK == archive_write_set_format_gnutar(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_xz(a));

	  strcpy(our_compression_data_p, "xz:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
/*
	  pedro_dprintf(0, "oque foi?\n");

	  exit(27);*/
	  break;
////////////////////////////////////////////////////////////////////////////////////////

















































 case P_MODE_IS_V7TAR_GZIP:

	  assert(ARCHIVE_OK == archive_write_set_format_v7tar(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_gzip(a));

	  strcpy(our_compression_data_p, "gzip:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	  break;
     
     case P_MODE_IS_V7TAR_BZIP2:

	  assert(ARCHIVE_OK == archive_write_set_format_v7tar(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_bzip2(a));

	  strcpy(our_compression_data_p, "bzip2:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
	  
	  break;
     case P_MODE_IS_V7TAR_XZ:

	  assert(ARCHIVE_OK == archive_write_set_format_v7tar(a));
	  assert(ARCHIVE_OK == archive_write_add_filter_xz(a));

	  strcpy(our_compression_data_p, "xz:compression-level=");

	  strcat(our_compression_data_p, compression_level_p);
	  
	  ret_arp_ = archive_write_set_options(a, our_compression_data_p);
	  
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));

	  if(ARCHIVE_OK != ret_arp_)
	  {
	       archive_write_close(a);
	       archive_write_free(a);
	       return 3;
	  }
/*
	  pedro_dprintf(0, "oque foi?\n");

	  exit(27);*/
	  break;
////////////////////////////////////////////////////////////////////////////////////////














	  
     default:
	  archive_write_open_filename_w(a, amanda_utf8towide_1_(file_utf_8_p));
	  archive_write_close(a);
	  archive_write_free(a);
	  return 1;
	  
	  break;
     }
	
     is_open_p = true;
     wide_fix_p = 1;

     * bytes_read_p = 0;     
     fatal_error_p = false;
     return 0;
}
				    
int __stdcall libarchive_process_p(char * new_entry_relative_p, char * new_entry_complete_p)
{
     pedro_dprintf(0, "passou amanda 6\n");
     assert(is_open_p);
     {
	  struct archive *disk = archive_read_disk_new();
#ifndef NO_LOOKUP
		
	  archive_read_disk_set_standard_lookup(disk);
#endif
	  int r;

	  pedro_dprintf(0, "file %s\n", new_entry_relative_p);
	  char temp_p[300] ={0};

	  {

     
	       WCHAR temp_p_w[300];
	       int p;
	       int i_p;

	       p = wcslen(amanda_utf8towide_1_(new_entry_relative_p));

	       wcscpy(temp_p_w, amanda_utf8towide_1_(new_entry_relative_p));
     
	       for(i_p =0; i_p < p; i_p++)
	       {
		    temp_p[i_p] = (char) temp_p_w[i_p];
	       }

	  }

	  r = archive_read_disk_open_w(disk, amanda_utf8towide_1_(new_entry_relative_p));
	  pedro_dprintf(0, "2 file %s\n", temp_p);
	  
	  if (r != ARCHIVE_OK) {

	       pedro_dprintf(2, "failed with file %s\n", new_entry_relative_p);
	       pedro_dprintf(2, "%s %s %d\n", archive_error_string(disk), __FILE__, __LINE__);
	       
	       exit(1);
	  }

	  for (;;)
	  {
	       int needcr = 0;

	       entry = archive_entry_new();

	       pedro_dprintf(0, "alocacao de entry %p\n", entry);
	       
	       r = archive_read_next_header2(disk, entry);
	       if (r == ARCHIVE_EOF)
	       {
		    pedro_dprintf(0, "3 file %s\n", new_entry_relative_p);
		    break;
	       }
	       pedro_dprintf(0, "2 alocacao de entry %p\n", entry);
	       pedro_dprintf(0, "4 file %s\n", new_entry_relative_p);
	       if (r != ARCHIVE_OK)
	       {
		   
		    pedro_dprintf(0, "%s %s %d\n", archive_error_string(disk), __FILE__, __LINE__);

		    archive_entry_free(entry);
		     
		    goto final_ok_p;
		    exit(1);
	       }
	       pedro_dprintf(0, "5 file %s\n", new_entry_relative_p);
	       archive_read_disk_descend(disk);
	       if (verbose)
	       {
		    msg("a ");
		    msg(archive_entry_pathname(entry));
		    needcr = 1;
	       }
	       pedro_dprintf(0, "7 file %s\n", new_entry_relative_p);
	       pedro_dprintf(0, "4 alocacao de entry %p\n", entry);
	       pedro_dprintf(0,  "     %s %d\n", archive_entry_pathname(entry), __LINE__);
	       pedro_dprintf(0, "utf8 %s %d\n", archive_entry_pathname_utf8(entry), __LINE__);
	       pedro_dprintfW(0, L" %ls %d\n", archive_entry_pathname_w(entry), __LINE__);
	       pedro_dprintf(0, "8 file %s\n", new_entry_relative_p);
	       r = archive_write_header(a, entry);
	       if (r < ARCHIVE_OK)
	       {
		    
		    pedro_dprintf(2, "%s %s %d\n", archive_error_string(disk), __FILE__, __LINE__);
		   
		    needcr = 1;
	       }

	       pedro_dprintfW(0, L"9 file %s\n", new_entry_relative_p);
	       
	       if (r == ARCHIVE_FATAL)
	       {
		    
		    fatal_error_p = true;

		    mprintf___arp("Fatal error, can be a wrong combination of compression level and number of threads, contat the developer and explain how to reproduce the problem\n");

		    exit(27);		    
		    
		    goto finish_ok_1_p;
	       }

	       pedro_dprintf(0, "10 file %s\n", new_entry_relative_p);
	       
	       if (r > ARCHIVE_FAILED)
	       {
#if 0
		    /* Ideally, we would be able to use
		     * the same code to copy a body from
		     * an archive_read_disk to an
		     * archive_write that we use for
		     * copying data from an archive_read
		     * to an archive_write_disk.
		     * Unfortunately, this doesn't quite
		     * work yet. */
		    copy_data(disk, a);
#else
		    /* For now, we use a simpler loop to copy data
		     * into the target archive. */

		    pedro_dprintf(0,   " A dando open em %s\n", archive_entry_sourcepath(entry));

		    pedro_dprintfW(0, L" W dando open em %ls\n", archive_entry_sourcepath_w(entry));

		    if(NULL == archive_entry_sourcepath(entry))
		    {
			 fd = _wopen(archive_entry_sourcepath_w(entry), O_RDONLY | O_BINARY);//sacanagem...
		    }
		    else
		    {
			 pedro_dprintf(0, "11 file %s\n", new_entry_relative_p);
			 fd = open(archive_entry_sourcepath(entry), O_RDONLY | O_BINARY);//sacanagem...
		    }

		    pedro_dprintf(0, "fd %d\n", fd);
		    
		    len = read(fd, buff, sizeof(buff));
		    while (len > 0)
		    {
			 * bytes_read_p += len;
			 
			 archive_write_data(a, buff, len);
			 len = read(fd, buff, sizeof(buff));			 
		    }
		    close(fd);
#endif
	       }

	  finish_ok_1_p:;

	       
	       archive_entry_free(entry);
	       if (needcr)
		    msg("\n");

	       break;
	  }


     final_ok_p:;
	 
	  archive_read_close(disk);
	  archive_read_free(disk);
	 
     }
     return 0;
}

int __stdcall libarchive_close_p(void)
{
     assert(is_open_p);
     archive_write_close(a);
     archive_write_free(a);

     is_open_p = false;
     wide_fix_p = 0;

     if(false == fatal_error_p)
     {

	  return 0;
	  
     }
     return 1;
}

int __stdcall set_progress_p(int64_t * pointer_value_p)
{
     assert(pointer_value_p);
     bytes_read_p = pointer_value_p;
     return 0;
}

int __stdcall libarchive_list_entries(char *filename_utf_8_p)
{

     int flags;
     int do_extract = 0;
     
     struct archive *a;
     struct archive *ext;
     struct archive_entry *entry;
     int r;
     flags = ARCHIVE_EXTRACT_TIME;
     a = archive_read_new();
     ext = archive_write_disk_new();
     archive_write_disk_set_options(ext, flags);

	
     archive_read_support_filter_all(a);
	
     //;archive_read_support_format_tar(a);
     archive_read_support_format_all(a);
     archive_read_add_passphrase(a, "password1234");

#ifndef NO_LOOKUP
	archive_write_disk_set_standard_lookup(ext);
#endif

	if ((r = archive_read_open_filename_w(a, amanda_utf8towide_1_(filename_utf_8_p) , 10240))) {
		errmsg(archive_error_string(a));

		pedro_dprintf(0, "Error: %s\n", archive_error_string(a));
		
		errmsg("\n");
		exit(r);
	}
	for (;;) {
		int needcr = 0;
		r = archive_read_next_header(a, &entry);
		if (r == ARCHIVE_EOF)
			break;
		if (r != ARCHIVE_OK) {
			errmsg(archive_error_string(a));
			errmsg("\n");
			exit(1);
		}
	
		if (!do_extract) {
			msg(archive_entry_pathname(entry));
			msg(" ");
			needcr = 1;
		}
		if (do_extract) {
			r = archive_write_header(ext, entry);
			if (r != ARCHIVE_OK) {
				errmsg(archive_error_string(a));
				needcr = 1;
			}
			else {
				r = copy_data(a, ext);
				if (r != ARCHIVE_OK)
					needcr = 1;
			}
		}
		if (needcr)
			msg("\n");
	}
	archive_read_close(a);
	archive_read_free(a);

	archive_write_close(ext);
  	archive_write_free(ext);
	exit(0);

     return 0;
}
